/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package book.model.impl;

import book.model.Book;
import book.model.BookModel;

import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model implementation for the Book service. Represents a row in the &quot;BOOK_Book&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>BookModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link BookImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see BookImpl
 * @generated
 */
@ProviderType
public class BookModelImpl extends BaseModelImpl<Book> implements BookModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a book model instance should use the <code>Book</code> interface instead.
	 */
	public static final String TABLE_NAME = "BOOK_Book";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"isbn", Types.VARCHAR},
		{"title", Types.VARCHAR}, {"author", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("isbn", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("author", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table BOOK_Book (uuid_ VARCHAR(75) null,isbn VARCHAR(75) not null primary key,title VARCHAR(75) null,author VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table BOOK_Book";

	public static final String ORDER_BY_JPQL = " ORDER BY book.title ASC";

	public static final String ORDER_BY_SQL = " ORDER BY BOOK_Book.title ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long AUTHOR_COLUMN_BITMASK = 1L;

	public static final long TITLE_COLUMN_BITMASK = 2L;

	public static final long UUID_COLUMN_BITMASK = 4L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	public BookModelImpl() {
	}

	@Override
	public String getPrimaryKey() {
		return _isbn;
	}

	@Override
	public void setPrimaryKey(String primaryKey) {
		setIsbn(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _isbn;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return Book.class;
	}

	@Override
	public String getModelClassName() {
		return Book.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Book, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Book, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Book, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Book)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Book, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Book, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept((Book)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Book, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Book, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Book>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Book.class.getClassLoader(), Book.class, ModelWrapper.class);

		try {
			Constructor<Book> constructor =
				(Constructor<Book>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<Book, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Book, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Book, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Book, Object>>();
		Map<String, BiConsumer<Book, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Book, ?>>();

		attributeGetterFunctions.put("uuid", Book::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<Book, String>)Book::setUuid);
		attributeGetterFunctions.put("isbn", Book::getIsbn);
		attributeSetterBiConsumers.put(
			"isbn", (BiConsumer<Book, String>)Book::setIsbn);
		attributeGetterFunctions.put("title", Book::getTitle);
		attributeSetterBiConsumers.put(
			"title", (BiConsumer<Book, String>)Book::setTitle);
		attributeGetterFunctions.put("author", Book::getAuthor);
		attributeSetterBiConsumers.put(
			"author", (BiConsumer<Book, String>)Book::setAuthor);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public String getIsbn() {
		if (_isbn == null) {
			return "";
		}
		else {
			return _isbn;
		}
	}

	@Override
	public void setIsbn(String isbn) {
		_isbn = isbn;
	}

	@Override
	public String getTitle() {
		if (_title == null) {
			return "";
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_columnBitmask = -1L;

		if (_originalTitle == null) {
			_originalTitle = _title;
		}

		_title = title;
	}

	public String getOriginalTitle() {
		return GetterUtil.getString(_originalTitle);
	}

	@Override
	public String getAuthor() {
		if (_author == null) {
			return "";
		}
		else {
			return _author;
		}
	}

	@Override
	public void setAuthor(String author) {
		_columnBitmask |= AUTHOR_COLUMN_BITMASK;

		if (_originalAuthor == null) {
			_originalAuthor = _author;
		}

		_author = author;
	}

	public String getOriginalAuthor() {
		return GetterUtil.getString(_originalAuthor);
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public Book toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = _escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		BookImpl bookImpl = new BookImpl();

		bookImpl.setUuid(getUuid());
		bookImpl.setIsbn(getIsbn());
		bookImpl.setTitle(getTitle());
		bookImpl.setAuthor(getAuthor());

		bookImpl.resetOriginalValues();

		return bookImpl;
	}

	@Override
	public int compareTo(Book book) {
		int value = 0;

		value = getTitle().compareTo(book.getTitle());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Book)) {
			return false;
		}

		Book book = (Book)obj;

		String primaryKey = book.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		BookModelImpl bookModelImpl = this;

		bookModelImpl._originalUuid = bookModelImpl._uuid;

		bookModelImpl._originalTitle = bookModelImpl._title;

		bookModelImpl._originalAuthor = bookModelImpl._author;

		bookModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Book> toCacheModel() {
		BookCacheModel bookCacheModel = new BookCacheModel();

		bookCacheModel.uuid = getUuid();

		String uuid = bookCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			bookCacheModel.uuid = null;
		}

		bookCacheModel.isbn = getIsbn();

		String isbn = bookCacheModel.isbn;

		if ((isbn != null) && (isbn.length() == 0)) {
			bookCacheModel.isbn = null;
		}

		bookCacheModel.title = getTitle();

		String title = bookCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			bookCacheModel.title = null;
		}

		bookCacheModel.author = getAuthor();

		String author = bookCacheModel.author;

		if ((author != null) && (author.length() == 0)) {
			bookCacheModel.author = null;
		}

		return bookCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Book, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Book, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Book, Object> attributeGetterFunction = entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Book)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Book, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Book, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Book, Object> attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Book)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final Function<InvocationHandler, Book>
		_escapedModelProxyProviderFunction = _getProxyProviderFunction();
	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private String _uuid;
	private String _originalUuid;
	private String _isbn;
	private String _title;
	private String _originalTitle;
	private String _author;
	private String _originalAuthor;
	private long _columnBitmask;
	private Book _escapedModel;

}